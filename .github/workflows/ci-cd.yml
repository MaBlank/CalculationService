name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java 17
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      - name: Set executable permissions for Maven wrapper
        run: chmod +x ./mvnw

      - name: Run tests and collect coverage with JaCoCo
        run: ./mvnw clean verify

      - name: Upload JaCoCo report as artifact
        uses: actions/upload-artifact@v3
        with:
          name: jacoco-report
          path: target/site/jacoco

      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./mvnw sonar:sonar \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.organization=${{ secrets.SONAR_ORG }} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Build Docker image
        run: docker build -t matthiasblank1990/calculationservice:${{ github.run_number }} .

      - name: Push Docker image to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker push matthiasblank1990/calculationservice:${{ github.run_number }}

  deploy_infrastructure:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1

      # Wechsle in das Verzeichnis, in dem sich die Terraform-Dateien befinden
      - name: Initialize Terraform
        working-directory: ./terraform  # Hier muss der relative Pfad zu deinem Terraform-Verzeichnis stehen
        run: terraform init

      - name: Apply Terraform
        working-directory: ./terraform  # Hier muss der relative Pfad zu deinem Terraform-Verzeichnis stehen
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          terraform apply -auto-approve \
            -var "subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -var "client_id=${{ secrets.AZURE_CLIENT_ID }}" \
            -var "client_secret=${{ secrets.AZURE_CLIENT_SECRET }}" \
            -var "tenant_id=${{ secrets.AZURE_TENANT_ID }}"

      - name: Output App Service URL
        id: app_service_output
        working-directory: ./terraform  # Hier muss der relative Pfad zu deinem Terraform-Verzeichnis stehen
        run: echo $(terraform output -raw app_service_default_hostname)

      - name: Store App Service URL for later steps
        run: echo "APP_SERVICE_URL=$(terraform output -raw app_service_default_hostname)" >> $GITHUB_ENV
